一、@log的定义
In [1]: def log(f):
   ...:     def fn(x):
   ...:         print 'call ' + f.__name__ + '()...'
   ...:         return f(x)
   ...:     return fn
   ...:

In [2]: @log
   ...: def factorial(n):
   ...:     return reduce(lambda x, y: x*y, range(1, n + 1))
   ...:

In [3]: print factorial(10)
call factorial()...
3628800

二、@performance的定义
import time

def performance(f):
    def fn(*args, **kw):
        t1 = time.time()
        r = f(*args, **kw)
        t2 = time.time()
        print 'call %s() in %fs' % (f.__name__, (t2 - t1))
        return r
    return fn

@performance
def factorial(n):
    return reduce(lambda x,y: x*y, range(1, n+1))

print factorial(10)

三、example

import time

def performance(f): 
	def fn(number): 
		start = time.time() 
		nums = f(number)
		end = time.time() 
		time_consuming = end - start 
		print 'call %s() in %fs' % (f.__name__, time_consuming)
		return nums 
	return fn

@performance
def get_prime(number):
    if number <= 1:
        return None
    else:
        nums = range(2, number)
        for i in range(2, 10):
            nums = filter(lambda x: x == i or x % i, nums)
        return nums

@performance
def get_prime1(number):
    if number <= 1:
        return None
    else:
        nums = range(2, number)
        for i in [2, 3, 5, 7]:
            nums = filter(lambda x: x == i or x % i, nums)
        return nums
        
get_prime(1000000)
get_prime1(1000000)

result:
call get_prime() in 0.496000s
call get_prime1() in 0.396000s
[Finished in 1.3s]

四、通用的decorator
code：
import time
import math
from functools import wraps

def fn_timer(function):
	@wraps(function)
	def function_timer(*args, **kwargs):
		t0 = time.time()
		result = function(*args, **kwargs)
		t1 = time.time()
		print ("Total time running %s: %s seconds" % (function.func_name, str(t1-t0)))
		return result 
	return function_timer

五、检测内存占用
1、安装两个包
pip install -U memory_profiler

pip install  psutil

2、在需要检测的方法前加上@profile
@profile
def random_sort(n):
	return sorted([random.random() for i in range(n)])
	
3、运行py文件
D:\python脚本\decorator>python -m memory_profiler eg6.py
Filename: eg6.py

Line #    Mem usage    Increment   Line Contents
================================================
    15   13.633 MiB    0.000 MiB   @profile
    16                             # @fn_timer
    17                             def random_sort(n):
    18  139.488 MiB  125.855 MiB        return sorted([random.random() for i in
range(n)])

六、cProfile模块进行性能分析
安装pip install cprofilev
code:
def sum_num(max_num):
	total = 0 
	for i in range(max_num):
		total += i 
	return total 

def test():
	total = 0 
	for i in range(40000):
		total += i 

	t1 = sum_num(100000)
	t2 = sum_num(400000)

	return total 

if __name__ == "__main__":
	import cProfile

	# print the analysis result to the console
	cProfile.run("test()")
	# save the analysis result to a file
	cProfile.run("test()", filename="result.out")
	# add a sorting method
	cProfile.run("test()", filename="result.out", sort="cumulative")

result:
        8 function calls in 0.046 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.046    0.046 <string>:1(<module>)
        2    0.037    0.018    0.044    0.022 cprofile_test.py:1(sum_num)
        1    0.001    0.001    0.046    0.046 cprofile_test.py:7(test)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        3    0.008    0.003    0.008    0.003 {range}

七、在算法的时间复杂度排序上依次是：O(1) -> O(lg n) -> O(n lg n) -> O(n^2) -> O(n^3) -> O(n^k) -> O(k^n) -> O(n!)
数据结构dictionary和list的性能比较
eg1：
import time
from functools import wraps 

def performance(f): 
	@wraps(f)
	def fn(): 
		start = time.time() 
		result = f()
		end = time.time() 
		time_consuming = end - start 
		print 'call %s() in %fs' % (f.__name__, time_consuming)
		return result 
	return fn 

@performance 
def test():
	list1 = ['a', 'b', 'is', 'python', 'jason', 'hello', 'hill', 'with', 'phone', 'test',\
	'dfdf', 'apple', 'pddf', 'ind', 'basic', 'none', 'baecr', 'var', 'bana', 'dd', 'wrd']
	list1 = dict.fromkeys(list1, True)
	print list1 
	filter = []
	for i in range(1000000):
		for find in ['is', 'hat', 'new', 'list', 'old', '.']:
			if find not in list1:
				filter.append(find)
	return filter

test()

结果：
{'a': True, 'none': True, 'b': True, 'jason': True, 'apple': True, 'python': True, 'is': True, 'dd': True, 'dfdf': True, 'wrd': True, 'baecr': True, 'var': True, 'phone': True, 'ind': True, 'bana': True, 'hill': True, 'pddf': True, 'basic': True, 'test': True, 'with': True, 'hello': True}
call test() in 0.817000s
[Finished in 1.2s]
	
eg2：
import time
from functools import wraps 

def performance(f): 
	@wraps(f)
	def fn(): 
		start = time.time() 
		result = f()
		end = time.time() 
		time_consuming = end - start 
		print 'call %s() in %fs' % (f.__name__, time_consuming)
		return result 
	return fn 

@performance 
def test():
	list1 = ['a', 'b', 'is', 'python', 'jason', 'hello', 'hill', 'with', 'phone', 'test',\
	'dfdf', 'apple', 'pddf', 'ind', 'basic', 'none', 'baecr', 'var', 'bana', 'dd', 'wrd']
	# list1 = dict.fromkeys(list1, True)
	print list1 
	filter = []
	for i in range(1000000):
		for find in ['is', 'hat', 'new', 'list', 'old', '.']:
			if find not in list1:
				filter.append(find)
	return filter

test()

注释掉list1 = dict.fromkeys(list1, True)后，结果：
['a', 'b', 'is', 'python', 'jason', 'hello', 'hill', 'with', 'phone', 'test', 'dfdf', 'apple', 'pddf', 'ind', 'basic', 'none', 'baecr', 'var', 'bana', 'dd', 'wrd']
call test() in 2.152000s
[Finished in 2.5s]

结论：在需要多数据成员进行频繁的查找或者访问的时候，使用 dict 而不是 list 是一个较好的选择。

八、list、列表推导式、set性能比较
code:
import time
from functools import wraps 

def performance(f): 
	@wraps(f)
	def fn(): 
		start = time.time() 
		result = f()
		end = time.time() 
		time_consuming = end - start 
		print 'call %s() in %fs' % (f.__name__, time_consuming)
		return result 
	return fn 

@performance
def test():
	lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 34, 53, 42, 44]
	listb = [2, 4, 6, 9, 23]
	intersection = []
	for i in range(1000000):
		for a in lista:
			for b in listb:
				if a == b:
					intersection.append(a)
	return intersection

@performance
def test1():
	lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 34, 53, 42, 44]
	listb = [2, 4, 6, 9, 23]
	for i in range(1000000):
		intersection = [x for x in lista for y in listb if x == y]
	return intersection

@performance 
def test2():
	lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 34, 53, 42, 44]
	listb = [2, 4, 6, 9, 23]
	intersection = []
	for i in range(1000000):
		intersection = list(set(lista)&set(listb))
	return intersection
	
@performance 
def test3():
	lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 34, 53, 42, 44]
	listb = [2, 4, 6, 9, 23]
	intersection = []
	for i in xrange(1000000):
		intersection = list(set(lista)&set(listb))
	return intersection

test()
test1()
test2()
test3()

结果：
call test() in 2.847000s
call test1() in 2.389000s
call test2() in 1.277000s
call test3() in 1.265000s
[Finished in 8.1s]

结论：
set 的 union， intersection，difference 操作要比 list 的迭代要快。
因此如果涉及到求 list 交集，并集或者差的问题可以转换为 set 来操作。

set常见用法：
语法	操作	说明
set(list1) | set(list2)	union	包含 list1 和 list2 所有数据的新集合
set(list1) & set(list2)	intersection	包含 list1 和 list2 中共同元素的新集合
set(list1) - set(list2)	difference	在 list1 中出现但不在 list2 中出现的元素的集合

range 用 xrange 代替

九、字符串的优化，使用 + 连接字符串和str.join()连接字符串, str.join()比 + 快了四十多倍
code:
import time
from functools import wraps 

def performance(f): 
	@wraps(f)
	def fn(): 
		start = time.time() 
		result = f()
		end = time.time() 
		time_consuming = end - start 
		print 'call %s() in %fs' % (f.__name__, time_consuming)
		return result 
	return fn 

@performance
def test():
	s = ""
	list1 = ['a', 'b', 'b', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']
	for i in range(1000000):
		for substr in list1:
			s += substr 
	return s

@performance
def test1():
	s = ""
	list1 = ['a', 'b', 'b', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']
	for i in range(1000000):
		s = ''.join(list1)
	return s

test()
test1()

结果：
call test() in 8.660000s
call test1() in 0.173000s
[Finished in 9.1s]













