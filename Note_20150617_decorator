一、@log的定义
In [1]: def log(f):
   ...:     def fn(x):
   ...:         print 'call ' + f.__name__ + '()...'
   ...:         return f(x)
   ...:     return fn
   ...:

In [2]: @log
   ...: def factorial(n):
   ...:     return reduce(lambda x, y: x*y, range(1, n + 1))
   ...:

In [3]: print factorial(10)
call factorial()...
3628800

二、@performance的定义
import time

def performance(f):
    def fn(*args, **kw):
        t1 = time.time()
        r = f(*args, **kw)
        t2 = time.time()
        print 'call %s() in %fs' % (f.__name__, (t2 - t1))
        return r
    return fn

@performance
def factorial(n):
    return reduce(lambda x,y: x*y, range(1, n+1))

print factorial(10)

三、example

import time

def performance(f): 
	def fn(number): 
		start = time.time() 
		nums = f(number)
		end = time.time() 
		time_consuming = end - start 
		print 'call %s() in %fs' % (f.__name__, time_consuming)
		return nums 
	return fn

@performance
def get_prime(number):
    if number <= 1:
        return None
    else:
        nums = range(2, number)
        for i in range(2, 10):
            nums = filter(lambda x: x == i or x % i, nums)
        return nums

@performance
def get_prime1(number):
    if number <= 1:
        return None
    else:
        nums = range(2, number)
        for i in [2, 3, 5, 7]:
            nums = filter(lambda x: x == i or x % i, nums)
        return nums
        
get_prime(1000000)
get_prime1(1000000)

result:
call get_prime() in 0.496000s
call get_prime1() in 0.396000s
[Finished in 1.3s]

四、通用的decorator
code：
import time
import math
from functools import wraps

def fn_timer(function):
	@wraps(function)
	def function_timer(*args, **kwargs):
		t0 = time.time()
		result = function(*args, **kwargs)
		t1 = time.time()
		print ("Total time running %s: %s seconds" % (function.func_name, str(t1-t0)))
		return result 
	return function_timer

五、检测内存占用
1、安装两个包
pip install -U memory_profiler

pip install  psutil

2、在需要检测的方法前加上@profile
@profile
def random_sort(n):
	return sorted([random.random() for i in range(n)])
	
3、运行py文件
D:\python脚本\decorator>python -m memory_profiler eg6.py
Filename: eg6.py

Line #    Mem usage    Increment   Line Contents
================================================
    15   13.633 MiB    0.000 MiB   @profile
    16                             # @fn_timer
    17                             def random_sort(n):
    18  139.488 MiB  125.855 MiB        return sorted([random.random() for i in
range(n)])


	
















