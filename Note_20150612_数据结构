一、list
1. list方法
list.append(x)
把一个元素添加到链表的结尾，相当于 a[len(a):] = [x] 。

list.extend(L)
将一个给定列表中的所有元素都添加到另一个列表中，相当于 a[len(a):] = L 。
In [47]: t1 = ['a', 'b', 'c']

In [48]: t2 = ['d', 'e']

In [49]: t1.extend(t2)

In [50]: print t1
['a', 'b', 'c', 'd', 'e']

In [51]: print t2
['d', 'e']

def capitalize_all(t):
	res = []
	for item in t:
		res.append(item.capitalize())
	return res
	
def only_upper(t):
	res = []
	for s in t:
		if s.isupper():
			res.append(s)
	return res

isupper is a string method that returns true if it contains only upper case letters

list.insert(i, x)
在指定位置插入一个元素。第一个参数是准备插入到其前面的那个元素的索引，例如 a.insert(0, x) 会插入到整个链表之前，而 a.insert(len(a), x) 相当于 a.append(x) 。

list.remove(x)
删除链表中值为 x 的第一个元素。如果没有这样的元素，就会返回一个错误。

list.pop([i])
从链表的指定位置删除元素，并将其返回。如果没有指定索引， a.pop() 返回最后一个元素。元素随即从链表中被删除。（方法中 i 两边的方括号表示这个参数是可选的，而不是要求你输入一对方括号，你会经常在Python 库参考手册中遇到这样的标记。）

list.index(x)
返回链表中第一个值为 x 的元素的索引。如果没有匹配的元素就会返回一个错误。

list.count(x)
返回 x 在链表中出现的次数。

list.sort()
对链表中的元素就地进行排序。

sort和sorted的区别
In [11]: a = [5, 2, 1, 9, 6]

In [12]: sorted(a)
Out[12]: [1, 2, 5, 6, 9]

In [13]: b = sorted(a)

In [14]: b
Out[14]: [1, 2, 5, 6, 9]

In [15]: a
Out[15]: [5, 2, 1, 9, 6]

In [16]: a.sort()

In [17]: a
Out[17]: [1, 2, 5, 6, 9]

In [18]: a.sort(reverse = True)

In [19]: a
Out[19]: [9, 6, 5, 2, 1]


list.reverse()
就地倒排链表中的元素。

2.把链表当作堆栈使用
堆栈作为特定的数据结构，最先进入的元素最后一个被释放（后进先出）。
用 append() 方法可以把一个元素添加到堆栈顶。
用不指定索引的 pop() 方法可以把一个元素从堆栈顶释放出来
In [28]: lst = [3, 4, 5]

In [29]: stack = lst

In [30]: stack
Out[30]: [3, 4, 5]

In [31]: stack.append(6)

In [32]: stack.append(7)

In [33]: stack
Out[33]: [3, 4, 5, 6, 7]

In [34]: stack.pop()
Out[34]: 7

In [35]: stack.pop()
Out[35]: 6

In [36]: stack
Out[36]: [3, 4, 5]

In [37]: stack.pop()
Out[37]: 5

In [38]: stack
Out[38]: [3, 4]

3.把链表当作队列使用
队列作为特定的数据结构，最先进入的元素最先释放（先进先出）。不过，列表这样用效率不高。
相对来说从列表末尾添加和弹出很快；在头部插入和弹出很慢（因为，为了一个元素，要移动整个列表中的所有元素）
In [39]: from collections import deque

In [40]: queue = deque(["Eric", "John", "Michacl"])

In [41]: queue.append("Terry")

In [42]: queue.append("Graham")

In [43]: queue.popleft()
Out[43]: 'Eric'

In [44]: queue.popleft()
Out[44]: 'John'

In [45]: queue
Out[45]: deque(['Michacl', 'Terry', 'Graham'])

3.列表推导式
列表推导式为从序列中创建列表提供了一个简单的方法。 
普通的应用程式通过将一些操作应用于序列的每个成员并通过返回的元素创建列表，
或者通过满足特定条件的元素创建子序列。
In [46]: squares = []

In [47]: for x in range(10):
   ....:     squares.append(x**2)
   ....:

In [48]: squares
Out[48]: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

In [49]: squares1 = [x**2 for x in range(10)]

In [50]: squares1
Out[50]: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

In [52]: squares2 = map(lambda x: x**2, range(10))

In [53]: squares2
Out[53]: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

In [54]: [(x, y) for x in [1, 2, 3] for y in [3, 1, 4] if x != y]
Out[54]: [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

4. 生成器推导式
(x+1 for x in lst) #生成器推导式，返回迭代器。外部的括号可在用于参数时省略。
[x+1 for x in lst] #列表推导式，返回list

5. 迭代器iter(o[, sentinel])，返回一个列表迭代器
In [5]: lst = range(2)

In [6]: it = iter(lst)

In [7]: it
Out[7]: <listiterator at 0x407b748>

In [8]: it.next()
Out[8]: 0

In [9]: it.next()
Out[9]: 1

In [10]: it.next()
---------------------------------------------------------------------------
StopIteration                             Traceback (most recent call last)
<ipython-input-10-54f0920595b2> in <module>()
----> 1 it.next()

StopIteration:

6. yield
返回一个生成器


二、集合
集合是一个无序不重复元素的集。基本功能包括关系测试和消除重复元素。

三、字典
循环技巧
1.在字典中循环时，关键字和对应的值可以使用 iteritems() 方法同时解读出来。
In [56]: for k, v in knights.items():
   ....:     print (k, v)
   ....:
('gallahad', 'the pure')
('robin', 'the brave')

In [1]: eng2sp = dict()

In [2]: eng2sp
Out[2]: {}

In [3]: eng2sp['one'] = 'uno'

In [4]: eng2sp
Out[4]: {'one': 'uno'}

In [5]: len(eng2sp)
Out[5]: 1

In [7]: 'one' in eng2sp
Out[7]: True

In [8]: 'uno' in eng2sp
Out[8]: False

In [9]: vals = eng2sp.values()

In [10]: 'uno' in vals
Out[10]: True

2.在序列中循环时，索引位置和对应值可以使用 enumerate() 函数同时得到。
In [57]: for i, v in enumerate(['tic', 'tac', 'toe']):
   ....:     print (i, v)
   ....:
(0, 'tic')
(1, 'tac')
(2, 'toe')

3.同时循环两个或更多的序列，可以使用 zip() 整体打包。
In [58]: questions = ['name', 'quest', 'favorite color']

In [59]: answers = ['lancelot', 'the holy grail', 'blue']

In [60]: for q, a in zip(questions, answers):
   ....:     print('What is your {0} it is {1}.'.format(q, a))
   ....:
What is your name it is lancelot.
What is your quest it is the holy grail.
What is your favorite color it is blue.

4.需要逆向循环序列的话，先正向定位序列，然后调用 reversed() 函数。
In [63]: lst = range(1, 10, 2)

In [64]: for i in reversed(lst):
   ....:     print(i)
   ....:
9
7
5
3
1

5.要按排序后的顺序循环序列的话，使用 sorted() 函数，它不改动原序列，而是生成一个新的已排序的序列。
In [65]: basket = ['apple', 'orange', ]

In [66]: basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']

In [67]: for f in sorted(set(basket)):
   ....:     print(f)
   ....:
apple
banana
orange
pear


6. 函数式编程： filter， map，reduce
print map(lambda x: x.capitalize(), ['hello', 'world'])
print filter(lambda x: x.isupper(), ['HELLO', 'world'])


7. str.split(), return a list
In [73]: s = 'pining for the fjords'

In [74]: t = s.split()

In [75]: t
Out[75]: ['pining', 'for', 'the', 'fjords']

In [76]: s = 'spam-spam-spam'

In [77]: delimiter = '-'

In [78]: s.split(delimiter)
Out[78]: ['spam', 'spam', 'spam']

8. str.join() takes a list as a parameter and return a string
In [79]: t = ['pining', 'for', 'the', 'fjords']

In [80]: delimiter = ' '

In [81]: delimiter.join(t)
Out[81]: 'pining for the fjords'

四. zip([iterable, ...])
This function returns a list of tuples, 
where the i-th tuple contains the i-th element from each of the argument sequences or iterables.

In [1]: x = [1, 2, 3]

In [2]: y = [4, 5, 6]

In [3]: zipped = zip(x, y)

In [4]: zipped
Out[4]: [(1, 4), (2, 5), (3, 6)]












