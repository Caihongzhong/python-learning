selelium+python搭建环境：
http://www.cnblogs.com/sunada2005/p/selenium.html

1、Python环境搭建（参考Python-learning中Python环境搭建）
本人搭建Python版本为2.7.6

2、导入最新selenium模块
pip install -U selenium

3、安装Selenium server
http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html下载jre环境并安装

http://grokbase.com/t/gg/selenium-users/1448ast3pt/selenium-server-standalone-2-41-0-jar-appears-to-be-corrupt
下载selenium-server-standalone-2.x.x.jar并启动，
启动命令：java -jar selenium-server-standalone-2.x.x.jar

4、安装chrome driver和IE driver
http://www.cnblogs.com/fnng/archive/2013/05/29/3106515.html

https://sites.google.com/a/chromium.org/chromedriver/




5、官方文档：
http://selenium-python.readthedocs.org/en/latest/installation.html

例子：
http://www.cnblogs.com/wuzhiming/p/3463070.html

学习视频网址：
http://www.testpub.cn/blog/

地址栏输入chrome://plugins/可以开启/禁用chrome所有插件

6、WebDriver 提供的八种定位方法：
find_element_by_id()

find_element_by_name()

find_element_by_class_name()

find_element_by_tag_name()

find_element_by_link_text()

find_element_by_partial_link_test()

find_element_by_xpath()

find_element_by_css_selector()

7、元素定位
1) id\name\class name\tag name:
百度搜索框前段代码：
<input id="kw1" class="s_ipt" type="text" maxlength="100" name="wd" autocomplete="off">

find_element_by_id("kw1")
find_element_by_mane("wd")
find_element_by_class_name("s_ipt")
find_element_by_tag_name("input")
注：页面上的元素tag name相同的几率很高

link\partial link
百度首页文字链接：
<a href="http://news.baidu.com" name="tj_news">新闻</a>
<a href="http://tieba.baidu.com" name="tj_tieba">贴吧</a>
<a href="http://zhidao.baidu.com" name="tj_zhidao">知道</a>

find_element_by_link_text(u'新闻')
find_element_by_partial_link_text('新')
find_element_by_link_text(u'贴吧')
一般一个页面上不会出现相同的文件链接，通过文字链接来定位元素也是一种简单有效的定位方式。


xpath：
使用FireBug查看元素，复制xpath

8. 下拉框的定位（二次定位）
方法一：
Select(driver.find_element_by_name("sheng")).select_by_visible_text(u"广东省")
Select(driver.find_element_by_name("shi")).select_by_visible_text(u"深圳市")
Select(driver.find_element_by_name("xian")).select_by_visible_text(u"罗湖区")

方法二：
# 先定位到下拉框
m = driver.find_element_by_id("ShippingMethod")
# 再点击下拉框下的选项
m.find_element_by_name("sheng").click()


9. 上传文件
#定位上传按钮，添加本地文件
driver.find_element_by_name("file").send_keys('D:\\upload_file.txt')

10. 弹窗的处理
driver.switch_to_alert().accept()

11. alert confirm prompt的处理
1)text 返回alert、 confirm、 prompt中的文字信息

2)accept 点击确认按钮

3)dismiss 点击取消按钮，如果有的话

4)send_keys 输入值，这个alert、 confirm没有对话框就不能用
driver.switch_to_alert()将焦点切换到页面上的alert


Webdriver中比较常用的操作元素的方法：

maximize_window() 浏览器最大化

set_window_size(480, 800) 设置浏览器宽、高 

back()
forward() 控制浏览器后退，前进


clear()    清除输入框的默认内容

send_keys("xxx")    在一个输入框里输入xx内容

——如果输入中文，则需要在脚本开头声明编码为utf-8，然后在中文字符前面加u(如：send_keys(u"中文内容"))

click()    点击一个按钮

submit()    提交表单
 

WebElement接口常用方法：

size    返回元素的尺寸

——如：size = driver.find_element_by_id("id").size

text    获取元素的文本

——如：text = driver.find_element_by_id("id").text

get_attribute(name)    获得属性值

——如：attribute = driver.find_element_by_id("id").get_attribute(‘type‘)

is_displayed()    设置该元素是否用户可见

——如：isshow = driver.find_element_by_id("id").is_displayed()

 

ActionChains类鼠标操作的常用方法：

引入ActionChains类：from selenium.webdriver.common.action_chains import ActionChains

context_click()    右击

——如：RightClick = driver.find_element_by_id("id")

           ActionChains(driver).context_click(RightClick).perform()

double_click()    双击

——如：DoubleClick = driver.find_element_by_name("name")

           ActionChains(driver).double_click(DoubleClick).perform()

drag_and_drop(source, target)    鼠标拖放

——source：鼠标按下的源元素；target：鼠标释放的目标元素

——如：element = driver.find_element_by_name("name")

           target = driver.find_element_by_name("name")

           ActionChains(driver).drag_and_drop(element, target).perform()

move_to_element()    鼠标悬停在一个元素上

——如：above = driver.find_element_by_xpath("xpath路径")

           ActionChains(driver).move_to_element(above).perform()

click_and_hold()    按下鼠标左键在一个元素上

——如：left = driver.find_element_by_name("name")

           ActionChains(driver).click_and_hold(left).perform()

 

键盘事件：

引入Keys类包：from selenium.webdriver.common.keys import Keys

send_keys()    输入框输入内容

——如：driver.find_element_by_id("id").send_keys("XXX")

send_keys(Keys.BACK_SPACE)    向左删除一个字符                                              ——如：driver.find_element_by_id("id").send_keys("XXX")

send_keys(Keys.SPACE)    输入空格

send_keys(Keys.TAB) 制表键(Tab)

send_keys(Keys.ESCAPE) 回退键(Esc)

send_keys(Keys.ENTER) 回车键(Enter)

send_keys(Keys.CONTROL, 'a') 全选(ctrl+A)

——如：driver.find_element_by_id("id").send_keys(Keys.SPACE)

send_keys(Keys.CONTROL,‘a‘)    ctrl+a 全选输入框的内容

——如：driver.find_element_by_id("id").send_keys(Keys.CONTROL,‘a‘)

send_keys(Keys.CONTROL,‘x‘)    ctrl+x 剪切输入框的内容

——如：driver.find_element_by_id("id").send_keys(Keys.CONTROL,‘x‘)

send_keys(Keys.CONTROL,‘v‘)    ctrl+v 粘贴到输入框

——如：driver.find_element_by_id("id").send_keys(Keys.CONTROL,‘v‘)

send_keys(Keys.ENTER)    回车代替点击

——如：driver.find_element_by_id("id").send_keys(Keys.ENTER)

send_keys(Keys.TAB)    制表键(Tab)

——如：driver.find_element_by_id("id").send_keys(Keys.TAB)

send_keys(Keys.ESCAPE)    回退键（Esc）

——如：driver.find_element_by_id("id").send_keys(Keys.ESCAPE) 

send_keys(Keys.CONTROL,‘c‘)    复制

——如：driver.find_element_by_id("id").send_keys(Keys.CONTROL,‘c‘)  

 

打印信息

#获得title并打印

title = driver.title

print title

#拿当前title名称进行预期比较

if title == u"百度一下，你就知道":

　　print "title yes!"

else:

　　print "title no!"

#获得当前URL并打印

url = driver.current_url

print url

 

等待时间

#导入 WebDriverWait 包
from selenium.webdriver.support.ui import WebDriverWait
#导入 time 包
import time

sleep()    设置固定等待时间

——如：time.sleep(5)  #等待5秒

implicitly_wait()    等待一个元素被发现，或一个命令完成，超出了设置时间则抛出异常

——如：driver.implicitly_wait(30)

           driver.find_element_by_id("id").click()

WebDriverWait()    在设置时间内，默认每隔一段时间检测检测一次当前页面元素是否存在，如果超过设置时间检测不到则抛出异常

WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)

——driver：WebDriver 的驱动程序(Ie, Firefox, Chrome 或远程)

——timeout：最长超时时间，默认以秒为单位

——poll_frequency：休眠时间的间隔（步长）时间，默认为 0.5 秒

——ignored_exceptions：超时后的异常信息，默认情况下抛 NoSuchElementException 异常

——如1：element = WebDriverWait(driver, 10).until(lambda x : x.find_element_by_id("id"))

           element.send_keys("selenium")

——如2：element = WebDriverWait(driver, 10).until(lambda x: x.find_element_by_id(“Id”))

            is_disappeared = WebDriverWait(driver, 30, 1, (ElementNotVisibleException)).until_not(lambda x: x.find_element_by_id(“someId”).is_displayed())

WebDriverWai()一般由 unit()或 until_not()方法配合使用:

——until(method, message=’’)
      调用该方法提供的驱动程序作为一个参数，直到返回值不为 False。
——until_not(method, message=’’)
      调用该方法提供的驱动程序作为一个参数，直到返回值为 False。

 

定位一组对象

#选择当前页面上所有tag name为input的元素

inputs = driver.find_elements_by_tag_name(‘input‘)

#从中过滤出type为checkbox的元素，并勾选上

for input in inputs:

　　if input.get_attribute(‘type‘) == ‘checkbox‘:

　　　　input.click()

#使用CSS定位选择所有type为checkbox的元素，并勾选上

checkboxes = driver.find_elements_by_css_selector(‘input[type=checkbox]‘)

for checkbox in checkboxes:

　　checkbox.click()

#把最后一个checkbox的勾去掉    pop()为空则是最后一个

driver.find_elements_by_css_selector(‘input[type=checkbox]‘).pop().click()










