Python 语言：解释型语言，不用编译，
缺点：运行速度慢
优点：开发速度快，代码少


Python：跨平台语言
下载网站：www.python.org python2.7.x

首行不能有空格

Python数据类型：
1、整数
2、浮点数
3、字符串
4、布尔值
一个布尔值只有True和False两个值
逻辑运算符：and、or、not
5、空值
空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，
而None是一个特殊的空值。

代码：
在python中，十进制整数和十六进制数可以直接相加
#Enter a code
print 45678 + 0x12fd2
print "Learn Python in imooc"
print 100 < 99
print 0xff == 255

代码：
print遇到逗号“,”，会输出一个空格
#input code
print "hello, python"
print "hello,","python"

代码：
求等差数列前100项的和
x1 = 1
d = 3
n = 100
x100 = x1 + (n - 1) * d
s = (x1 + x100) * n / 2
print s

代码：
r'''...'''表示把字符串也变成一个raw字符串
print r'''"To be, or not to be": that is the question.
Whether it's nobler in the mind to suffer.'''

代码：
python把0、空字符串''、和None看成False，其他数值和非空字符串都看成True；
and 和 or 运算的一条重要法则：短路运算：
1. 在计算 a and b 时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。
2. 在计算 a or b 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。

a = 'python'
print 'hello,', a or 'world'

b = ''
print 'hello,', b or 'world'

结果：
hello, python

hello, world

代码：
创建list，由于Python是动态语言，所以list中包含的元素并不要求都必须是同一种数据类型，我们完全可以在list中包含各种数据：
L = ['Adam', 95.5, 'Lisa', 85, 'Bart', 59]
print L

结果：
['Adam', 95.5, 'Lisa', 85, 'Bart', 59]

代码：
append()方法添加新的元素到列表的末尾，insert()方法指定两个参数，添加新的元素到指定的索引中
L = ['Adam', 'Lisa', 'Bart']
L.insert(2, 'Paul')
print L

结果：
 ['Adam', 'Lisa', 'Paul', 'Bart']


代码：
pop()方法总是删掉list的最后一个元素，并且它还返回这个元素；pop()还可以指定删除元素的索引
L = ['Adam', 'Lisa', 'Paul', 'Bart']
L.pop(2)
L.pop(2)
print L

结果：
['Adam', 'Lisa']


代码：
替换元素
L = ['Adam', 'Lisa', 'Bart']
L[0] = 'Bart'
L[-1] = 'Adam'
print L

结果：
['Bart', 'Lisa', 'Adam']


代码：
创建单元素tuple
t = ('Adam',)
print t


代码：
tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向'a'，就不能改成指向'b'，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！
t = ('a', 'b', ['A', 'B'])
L = t[2]
L[0] = 'X'
L[1] = 'Y'
print t
('a', 'b', ['X', 'Y'])

代码：
for循环
L = [75, 92, 59, 68]
sum = 0.0
for score in L:
    sum += score
print sum / 4


代码：
while循环
sum = 0
x = 1
while x <= 100:
    sum += x
    x += 2
print sum


代码：
break退出循环
sum = 0
x = 1
n = 1
while True:
    sum += x
    x = x * 2
    n += 1
    if n >20:
        break
print sum

代码：
continue跳过后续循环代码，继续下一次循环。
sum = 0
x = 0
while True:
    x = x + 1
    if x > 100:
        break
    if x % 2 == 0:
        continue
    sum += x
print sum

知识点：python中print句末会自动换行，若不想让它自动换行，python2的使用方式是在句末添加,符号。


代码：
多重循环：
for x in [ '1', '2', '3', '4', '5', '6', '7', '8', '9' ]:
    for y in [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' ]:
        if x < y:
            print x + y,


代码：
dict字典：key-value对
d = {
    
    'Adam': 95,
    'Lisa': 85,
    'Bart': 59,
    'Paul': 75
}


代码：
访问dict
d = {
    'Adam': 95,
    'Lisa': 85,
    'Bart': 59
}
print 'Adam:', d['Adam']
print 'Lisa:', d['Lisa']
print 'Bart:', d['Bart']

注：字符串类型和int型数据不能直接相加


知识点：
dict的特点
1、dict的第一个特点是查找速度快，无论dict有10个元素还是10万个元素，查找速度都一样。而list的查找速度随着元素增加而逐渐下降。
dict的缺点是占用内存大，还会浪费很多内容，list正好相反，占用内存小，但是查找速度慢。
2、dict的第二个特点就是存储的key-value序对是没有顺序的！不能用dict存储有序的集合。
3、dict的第三个特点是作为 key 的元素必须不可变，Python的基本类型如字符串、整数、浮点数都是不可变的，都可以作为 key。
但是list是可变的，就不能作为 key。


代码：
更新dict，增加新的key-value对，或者更新已有的key的value值
d = {
    95: 'Adam',
    85: 'Lisa',
    59: 'Bart'
}
d[72] = 'Paul'


代码：
set的创建，创建 set 的方式是调用 set() 并传入一个 list，list的元素将作为set的元素
s = set(['Adam', 'Lisa', 'Bart', 'Paul'])


知识点：
1、list中的元素适可重复的，list是有序的；
2、dict中的key是不可重复的，dict是无序的；
3、set中的元素是没有重复的，set中的元素是无序的；当我们传入包含重复元素的list时，set会自动去掉重复的元素。
set存储的元素和dict的key类似，必须是不变对象，因此，任何可变对象是不能放入set中的。


代码：
访问set
s = set(['Adam', 'Lisa', 'Bart', 'Paul', 'adam', 'lisa', 'bart', 'paul'])
print 'adam' in s
print 'bart' in s


代码：
set的用法
months = set(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
x1 = 'Feb'
x2 = 'Sun'

if x1 in months:
    print 'x1: ok'
else:
    print 'x1: error'

if x2 in months:
    print 'x2: ok'
else:
    print 'x2: error'


代码：
遍历set，结合了tuple的使用
s = set([('Adam', 95), ('Lisa', 85), ('Bart', 59)])
for x in s:
    print x[0]+':', x[1]

结果：
Lisa: 85

Adam: 95

Bart: 59


代码：
更新set，一是把新的元素添加到set中，二是把已有元素从set中删除。添加元素时，用set的add()方法，删除set中的元素时，用set的remove()方法。
s = set(['Adam', 'Lisa', 'Paul'])
L = ['Adam', 'Lisa', 'Bart', 'Paul']
for name in L:
    if name in s:
        s.remove(name)
    else:
        s.add(name)
print s

结果：
set(['Bart'])

eg: reverse a string or a list

In [15]: s = 'abc'

In [16]: s = s[::-1]

In [17]: s
Out[17]: 'cba'

In [18]: list = [1, 2, 3, 4, 5]

In [19]: list = list[::-1]

In [20]: list
Out[20]: [5, 4, 3, 2, 1]













