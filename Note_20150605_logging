一.logging模块

1.模块提供logger，handler，filter，formatter

2.logger：提供日志接口，
可以通过logger = logging.getLogger(__name__)获取logger对象，
logger对象可以通过Logger.setLevel()定义不同的日志级别，
logger对象通过 Logger.debug(), Logger.info(), Logger.warning(), Logger.error(), and Logger.critical()等方法发送日志消息
logger对象通过 Logger.addHandler()和Logger.removeHandler()添加和移除Handler对象
logger对象通过 Logger.addFilter() and Logger.removeFilter()添加和移除Filter对象

3.handler：将日志记录（log record）发送到合适的目的地（destination），比如文件，socket，控制台，
比较常用的有StreamHandler and FileHandler，一个logger对象可以通过addHandler方法添加0到多个handler，
handler对象通过 setLevel()定义不同的日志级别，
handler对象通过 setFormatter()定义格式，
handler对象通过 addFilter() and removeFilter() 添加和移除Filter对象

4.formatter：指定日志记录输出的具体格式。
formatter的构造方法需要两个参数：消息的格式字符串和日期字符串，这两个参数都是可选的。
关于formatter的配置，采用的是%(<dict key>)s的形式，就是字典的关键字替换。

eg1:
simple_example.py
import logging

#create logger
logger = logging.getLogger('simple_example')
logger.setLevel(logging.DEBUG)

#create console handler and set level to DEBUG
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)

#create formatter
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

#add formatter to ch
ch.setFormatter(formatter)

#add ch to logger
logger.addHandler(ch)

#'application' code
logger.debug('debug message')
logger.info('info message')
logger.warn('warn message')
logger.error('error message')
logger.critical('critical message')

eg2:
auxiliary.py
import logging

#create logger
module_logger = logging.getLogger('spam_application.auxiliary')

class Auxiliary:
	def __init__(self):
		self.logger = logging.getLogger('spam_application.auxiliary.Auxiliary')
		self.logger.info('creating an instance of Auxiliary')

	def do_something(self):
		self.logger.info('doing something')
		a = 1 + 1
		self.logger.info('done doning something')

def some_function():
	module_logger.info('received a call to "some_function"')
	
main.py
import logging
import auxiliary_module

#create logger with 'spam_application'
logger = logging.getLogger('spam_application')
logger.setLevel(logging.DEBUG)

#create file handler which logs even debug messages
fh = logging.FileHandler('spam.log')
fh.setLevel(logging.DEBUG)

#create console handler with a higher log level
ch = logging.StreamHandler()
ch.setLevel(logging.ERROR)

#create formatter and add it to the handlers
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)
ch.setFormatter(formatter)

#add the handlers to the logger
logger.addHandler(fh)
logger.addHandler(ch)

logger.info('creating an instance of auxiliary_module.Auxiliary')
a = auxiliary_module.Auxiliary()
logger.info('created an instance of auxiliary_module.Auxiliary')
logger.info('calling auxiliary_module.Auxiliary.do_something')
a.do_something()
logger.info('finished auxiliary_module.Auxiliary.do_something')
logger.info('calling auxiliary_module.some_function()')
auxiliary_module.some_function()
logger.info('done with auxiliary_module.some_function()')

output:
2005-03-23 23:47:11,663 - spam_application - INFO -
   creating an instance of auxiliary_module.Auxiliary
2005-03-23 23:47:11,665 - spam_application.auxiliary.Auxiliary - INFO -
   creating an instance of Auxiliary
2005-03-23 23:47:11,665 - spam_application - INFO -
   created an instance of auxiliary_module.Auxiliary
2005-03-23 23:47:11,668 - spam_application - INFO -
   calling auxiliary_module.Auxiliary.do_something
2005-03-23 23:47:11,668 - spam_application.auxiliary.Auxiliary - INFO -
   doing something
2005-03-23 23:47:11,669 - spam_application.auxiliary.Auxiliary - INFO -
   done doing something
2005-03-23 23:47:11,670 - spam_application - INFO -
   finished auxiliary_module.Auxiliary.do_something
2005-03-23 23:47:11,671 - spam_application - INFO -
   calling auxiliary_module.some_function()
2005-03-23 23:47:11,672 - spam_application.auxiliary - INFO -
   received a call to 'some_function'
2005-03-23 23:47:11,673 - spam_application - INFO -
   done with auxiliary_module.some_function()
   
eg3:
import logging
logging.basicConfig(filename = 'example.log', level=logging.DEBUG)
logging.debug('This message should go to the log file')
logging.info('So should this')
logging.warning('And this, too')

eg4:
import logging

# set up logging to file - see previous section for more details
logging.basicConfig(level = logging.DEBUG,\
	format = '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',\
	datefmt = '%m-%d %H:%M',\
	filename = 'myapp.log',\
	filemode = 'w')
#define a handler which writes INFO messages or higher to the sys.stderr
console = logging.StreamHandler()
console.setLevel(logging.INFO)

#set a format which is simpler for console use
formatter = logging.Formatter('%(name)-12s: %(levelname)-8s %(message)s')

#tell the handler to use this format
console.setFormatter(formatter)

#add the handler to the root logger
logging.getLogger('').addHandler(console)

#Now, we can log to the root logger, or any other logger. First the root...
logging.info('Jackdaws love my big sphinx of quartz.')

#Now, define a couple of other loggers which might represent areas in your application

logger1 = logging.getLogger('myapp.area1')
logger2 = logging.getLogger('myapp.area2')

logger1.debug('Quick zephyrz blow, vexing daft Jim.')
logger1.info('How quickly daft jumping zebras vex.')
logger2.warning('Jail zesty vixen who grabbed pay from quack.')
logger2.error('The five boxing wizards jump quickly.')

console output:
root        : INFO     Jackdaws love my big sphinx of quartz.
myapp.area1 : INFO     How quickly daft jumping zebras vex.
myapp.area2 : WARNING  Jail zesty vixen who grabbed pay from quack.
myapp.area2 : ERROR    The five boxing wizards jump quickly.
